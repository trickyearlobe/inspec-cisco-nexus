(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{300:function(t,s,a){"use strict";a.r(s);var e=a(10),n=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"nexus-command"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#nexus-command"}},[t._v("#")]),t._v(" nexus command")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#description"}},[t._v("Description")])]),s("li",[s("a",{attrs:{href:"#examples"}},[t._v("Examples")])]),s("li",[s("a",{attrs:{href:"#properties"}},[t._v("Properties")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"description"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),s("p",[s("code",[t._v("nexus_command")]),t._v(" is a singular inspec resource which can run arbitrary NX-OS commands\non the nexus target switch and inspect their output. It can be used to make checks\nif there is no specialised resource available.")]),t._v(" "),s("h2",{attrs:{id:"examples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),s("p",[t._v('Check that the running config doesn\'t have any access lists which permit "ANY ANY" traffic')]),t._v(" "),s("div",{staticClass:"language-ruby line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("describe nexus_command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'show running config'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  its"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stdout'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("should "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("not")]),t._v(" match "),s("span",{pre:!0,attrs:{class:"token regex-literal"}},[s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/permit ip any any/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("Check that the clock has a timezone configured")]),t._v(" "),s("div",{staticClass:"language-ruby line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ruby"}},[s("code",[t._v("describe nexus_command"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'show running-config | include timezone'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  its"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string-literal"}},[s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'stdout'")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" should match "),s("span",{pre:!0,attrs:{class:"token regex-literal"}},[s("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^clock timezone/")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("h2",{attrs:{id:"properties"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Property")]),t._v(" "),s("th",[t._v("Type")]),t._v(" "),s("th",[t._v("Description")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("stdout")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("the standard output of the command")])]),t._v(" "),s("tr",[s("td",[t._v("stderr")]),t._v(" "),s("td",[t._v("string")]),t._v(" "),s("td",[t._v("the error output of the command")])]),t._v(" "),s("tr",[s("td",[t._v("exit_status")]),t._v(" "),s("td",[t._v("integer")]),t._v(" "),s("td",[t._v("The return code of the command")])])])])])}),[],!1,null,null,null);s.default=n.exports}}]);