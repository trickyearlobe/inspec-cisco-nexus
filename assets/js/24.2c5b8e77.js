(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{301:function(t,e,s){"use strict";s.r(e);var a=s(10),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"nexus-ntp-peers"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#nexus-ntp-peers"}},[t._v("#")]),t._v(" nexus ntp peers")]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#description"}},[t._v("Description")])]),e("li",[e("a",{attrs:{href:"#examples"}},[t._v("Examples")])]),e("li",[e("a",{attrs:{href:"#properties"}},[t._v("Properties")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"description"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#description"}},[t._v("#")]),t._v(" Description")]),t._v(" "),e("p",[e("code",[t._v("nexus_ntp_peers")]),t._v(" is an Inspec plural resource which retrieves the operational status of any NTP peers that have been configured on the system.")]),t._v(" "),e("p",[t._v("It can tell if they are reachable, and it can tell which timesource is being used for sync.")]),t._v(" "),e("p",[t._v("As a plural resource, it supports filters which allow selection and testing of peers which meet specific criteria.")]),t._v(" "),e("h2",{attrs:{id:"examples"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#examples"}},[t._v("#")]),t._v(" Examples")]),t._v(" "),e("p",[t._v("Check we have 3 NTP peers configured")]),t._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("describe nexus_ntp_peers "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  its"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count'")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("should eq "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("Check that all the peers are reachable.")]),t._v(" "),e("p",[t._v("If they are not, the diff will show the remotes (IP's) that are not reachable")]),t._v(" "),e("div",{staticClass:"language-ruby line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-ruby"}},[e("code",[t._v("describe nexus_ntp_peers"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("where"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" reachability "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("do")]),t._v("\n  its"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'count'")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("   "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("should eq "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  its"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string-literal"}},[e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'remotes'")])]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("should eq "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("end")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Filtering a plural resource to contain only failed elements enables us to get a list if we compare the field to the empty array [].\nThe example above might show the remotes of unreachable timeservers as ['192.168.0.55', '94.7.89.34']")])]),t._v(" "),e("h2",{attrs:{id:"properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#properties"}},[t._v("#")]),t._v(" Properties")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",[t._v("Singular")]),t._v(" "),e("th",[t._v("Plural")]),t._v(" "),e("th",[t._v("Type")]),t._v(" "),e("th",[t._v("Description")])])]),t._v(" "),e("tbody",[e("tr",[e("td"),t._v(" "),e("td",[t._v("count")]),t._v(" "),e("td",[t._v("integer")]),t._v(" "),e("td",[t._v("The number of entries in the ntp peer table")])]),t._v(" "),e("tr",[e("td"),t._v(" "),e("td",[t._v("entries")]),t._v(" "),e("td",[t._v("array")]),t._v(" "),e("td",[t._v("An array of hashes that contain the data for each peer. This data can be iterated in a loop")])]),t._v(" "),e("tr",[e("td",[t._v("delay")]),t._v(" "),e("td",[t._v("delays")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("The RTT between switch and ntp server")])]),t._v(" "),e("tr",[e("td",[t._v("local")]),t._v(" "),e("td",[t._v("locals")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("The local IP used reach the NTP peer")])]),t._v(" "),e("tr",[e("td",[t._v("poll_interval")]),t._v(" "),e("td",[t._v("poll_intervals")]),t._v(" "),e("td",[t._v("integer")]),t._v(" "),e("td",[t._v("The interval between polls")])]),t._v(" "),e("tr",[e("td",[t._v("reachability")]),t._v(" "),e("td",[t._v("reachabilities")]),t._v(" "),e("td",[t._v("integer")]),t._v(" "),e("td",[t._v("An 8 bit shift register (in octal) that tracks successive poll responses. Best = 377, 0 = unreachable")])]),t._v(" "),e("tr",[e("td",[t._v("remote")]),t._v(" "),e("td",[t._v("remotes")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("The remote IP of the peer")])]),t._v(" "),e("tr",[e("td",[t._v("stratum")]),t._v(" "),e("td",[t._v("stratums")]),t._v(" "),e("td",[t._v("integer")]),t._v(" "),e("td",[t._v("In a chain of networked timeservers, how close our peer is to the root timeserver")])]),t._v(" "),e("tr",[e("td",[t._v("syncmode")]),t._v(" "),e("td",[t._v("syncmodes")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[e("code",[t._v("*")]),t._v(" selected for sync"),e("br"),t._v(" "),e("code",[t._v("+")]),t._v(" peer mode (active)"),e("br"),t._v(" "),e("code",[t._v("-")]),t._v(" peer mode (passive)"),e("br"),t._v(" "),e("code",[t._v("=")]),t._v(" polled in client mode")])]),t._v(" "),e("tr",[e("td",[t._v("vrf")]),t._v(" "),e("td",[t._v("vrfs")]),t._v(" "),e("td",[t._v("string")]),t._v(" "),e("td",[t._v("Indicates which VRF (virtual routing/forwarding instance) is used to contact the peer")])])])])])}),[],!1,null,null,null);e.default=r.exports}}]);